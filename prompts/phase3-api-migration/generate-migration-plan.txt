Please analyze the API specification defined in `openapi.yaml` and the existing database structure documented in `phase2-db-discovery/data-base-definition.txt`.

Based on these inputs, suggest a detailed workplan to migrate the FaaS application logic into a new single monolithic project using the NestJS framework, adopting a Hexagonal Architecture (Ports and Adapters).

**Crucially, first evaluate the feasibility of a two-phase migration based on the database analysis (`data-base-definition.txt`):**
1.  **Assess Database Complexity:** Consider the number of tables (is it low, like 2-3?), the complexity of keys/indexes, and the potential for data duplication or normalization issues.
2.  **Determine Migration Strategy:**
    * **IF** a two-phase migration seems feasible (low complexity, manageable data structure): Generate a workplan focused *only* on **Phase 1: Migrating the backend logic** to NestJS (Hexagonal), assuming the application will **continue using the existing DynamoDB database** via a dedicated persistence adapter. The plan should outline steps for setting up NestJS modules, implementing ports/adapters, handling authentication/authorization, and integrating with DynamoDB using the AWS SDK.
    * **ELSE (IF** the database structure suggests significant refactoring is needed or a relational model is highly preferable due to complexity/duplication): Generate a workplan for a **unified migration**, including steps for both **migrating the backend logic** to NestJS (Hexagonal) *and* **migrating the database** from DynamoDB to a relational database like PostgreSQL (including schema design, data migration strategy, and using an ORM like TypeORM in the NestJS persistence adapter).

The generated workplan should be structured logically (e.g., phases, key tasks, estimated effort if possible, deliverables/checkpoints) and cover aspects like project setup, module creation per API resource (franchise, store, etc.), authentication/authorization implementation (replicating Cognito/AVP logic within NestJS), testing strategy, and basic deployment considerations for the IaaS monolith.

Save the final suggested workplan into a file named `generate-migration-plan.txt`.
