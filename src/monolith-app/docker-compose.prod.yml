# Docker Compose for Production Deployment
# Includes application, monitoring, and health checks

version: '3.8'

services:
  # Main PetStore Application
  petstore-app:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: petstore-monolith
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      # Application Configuration
      NODE_ENV: production
      PORT: 3000
      
      # Database Configuration
      AWS_REGION: ${AWS_REGION:-us-east-1}
      DYNAMODB_FRANCHISE_TABLE: ${DYNAMODB_FRANCHISE_TABLE:-petstoreFranchise}
      DYNAMODB_STORE_TABLE: ${DYNAMODB_STORE_TABLE:-petstoreTenants}
      
      # Authentication Configuration
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION: ${JWT_EXPIRATION:-24h}
      API_KEY: ${API_KEY}
      
      # AWS Configuration
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      
      # Monitoring Configuration
      LOG_LEVEL: ${LOG_LEVEL:-info}
      METRICS_ENABLED: ${METRICS_ENABLED:-true}
      
    volumes:
      # Persistent logs directory
      - ./logs:/app/logs:rw
      
    networks:
      - petstore-network
      
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
      
    depends_on:
      - prometheus
      - grafana
      
    # Resource limits for production
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Prometheus for Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: petstore-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus:/etc/prometheus:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - petstore-network

  # Grafana for Monitoring Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: petstore-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - petstore-network
    depends_on:
      - prometheus

  # Nginx Load Balancer/Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: petstore-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx:rw
    networks:
      - petstore-network
    depends_on:
      - petstore-app

  # Node Exporter for System Metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: petstore-node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    networks:
      - petstore-network

networks:
  petstore-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  prometheus-data:
    driver: local
  grafana-data:
    driver: local